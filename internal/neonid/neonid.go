package neonid

import (
	"fmt"
	"strings"

	"github.com/yanakipe/bot/internal/haikutooling"
)

type NeonIDsGenerator struct {
	extraPrefix string
}

// NewGenerator creates a NeonIDsGenerator
// extraPrefix arg is used to avoid conflicts between ids generated by console
// and ids generated by controlplanes. It adds an extra number to haiku generator output.
// The idea is that each control plane has a unique number while console has 0 (no number is appended).
// This also gives globally unique ids across regional controlplanes
// which is needed for billing/analytics
func NewGenerator(extraPrefix string) *NeonIDsGenerator {
	return &NeonIDsGenerator{extraPrefix: extraPrefix}
}

func (g *NeonIDsGenerator) New() string {
	if g.extraPrefix == "" {
		// V1 ID
		return haikutooling.Generate()
	}
	parts := strings.Split(haikutooling.GenerateV2(), "-")
	return fmt.Sprintf("%s-%s-%s%s", parts[0], parts[1], g.extraPrefix, parts[2])
}

func (g *NeonIDsGenerator) GenerateProjectID() string {
	// projects don't need extraPrefix
	// because console generate the ID in one place
	return haikutooling.Generate()
}

func (g *NeonIDsGenerator) GenerateBranchID() string {
	return fmt.Sprint("br-", g.New())
}

func (g *NeonIDsGenerator) GenerateEndpointID() string {
	return fmt.Sprint("ep-", g.New())
}

func (g *NeonIDsGenerator) GenerateComputeID() string {
	return fmt.Sprint("compute-", g.New())
}

func (g *NeonIDsGenerator) GenerateOrganizationID() string {
	return fmt.Sprint("org-", g.New())
}
